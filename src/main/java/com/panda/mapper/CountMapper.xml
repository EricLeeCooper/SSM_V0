<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.panda.dao.CountMapper">
	<!-- 添加用户 -->
	<insert id="addUser" parameterType="map">
		call addUser(#{map.user_name},#{map.user_email},#{map.user_password},#{map.user_ident},#{map.user_identnum})
	</insert>
	<!-- 根据用户ID查找图片 -->
	<select id="findPicture" parameterType="int" resultType="String">
		select fileurl from t_t_file where id = #{id} 
	</select>
	<!-- 根据用户ID查找好友 -->
	<select id="findFriendsByUserId" parameterType="int" resultType="User">
		select * from t_t_user where id in(select fid from t_t_friends where mid = #{id} )
	</select>
	<!-- 添加游戏记录 -->
	<insert id="addScoreRecode" parameterType="map">
		insert into t_t_gamescore(userId,score,time) values(#{map.userId},#{map.scoreInt},now())
	</insert>
	<!-- 查找最高记录分数 -->
	<select id="getLargestScore" resultType="int">
		select max(score) from t_t_gamescore
	</select>
	<!-- 查找所有游戏记录分数 -->
	<select id="getScoreList" resultType="GameScore">
		SELECT g.*,u.name AS userName  FROM t_t_gamescore g
		LEFT JOIN t_t_user u ON g.userid = u.id 
	</select>
	<!-- 分页查找游戏记录分数 -->
	<select id="getScoreListByPR" parameterType="map" resultType="GameScore">
		SELECT g.*,u.name AS userName  FROM t_t_gamescore g
		LEFT JOIN t_t_user u ON g.userid = u.id 
		order by g.score
		limit #{map.start},#{map.rows}
	</select>
	<!-- 添加图片 -->
	<insert id="addNewFile" parameterType="map">
		insert into t_t_file(user_id,fileurl) values(#{map.userId},#{map.url})
	</insert>
	<!-- 修改图片 -->
	<update id="updateNewFile" parameterType="map">
		update t_t_file set fileurl = #{map.url} where user_id = #{map.userId}
	</update>
	<!-- 最新添加的用户 -->
	<select id="getNewUser" resultType="User" >
		select * from t_t_user where id=( select max(id) from t_t_user)
	</select>
	<!-- 用户账户 -->
	<select id="findCountByUserId" resultType="int" parameterType="int">
		select usercount from t_t_count where user_id=#{userId}
	</select>
	<!-- 查找所有学生 -->
	<select id="getAllUsers" resultType="User">
		select * from t_t_user order by id
	</select>
	<!-- 查找文件 -->
	<select id="findUploadByUserId" resultType="FileUpload" parameterType="int">
		select * from t_t_file where userid=#{userId} 
	</select>
	<!-- 查找学生ID -->
	<select id="findUserIdByUsername" resultType="int" parameterType="string">
		select id from t_t_user where username=#{username}
	</select>
	<!-- 减少余额 -->
	<update id="decreaseCount" parameterType="map">
		update t_t_count set usercount = (usercount-#{map.tmoney}) where user_id = #{map.userId}
	</update>
	<!-- 增加余额-->
	<update id="raiseCount" parameterType="map">
		update t_t_count set usercount = (usercount+#{map.tmoney}) where user_id = #{map.tuserId}
	</update>
	<!-- 新增账户信息 -->
	<insert id="addCountInfo" parameterType="int">
		insert into t_t_count(id,user_id,usercount) values((select nvl(max(id),0)+1 from t_t_count),#{userId},0)
	</insert>
	<!-- 新增角色信息 -->
	<insert id="addRoleInfo" parameterType="int">
		insert into t_t_user_role values(#{userId},2)
	</insert>
	<!-- 查找密码 -->
	<select id="findUserPassword" parameterType="String" resultType="User" >
		select * from t_t_user where username = #{username}
	</select>
	<!-- 查找账户信息 -->
	<select id="serchOneByUserId" parameterType="int" resultMap="CountMap">
		select * from t_t_count where userid = #{user_id}
	</select>
	<!-- 查找用户角色 -->
	<select id="getRolesByUsername" parameterType="String" resultType="String" >
		select r.`rolename` as rolename from(select u.*,ur.role_id from t_t_user u left join t_t_user_role ur on u.id = ur.user_id) e 
		left join t_t_role r on e.role_id = r.id where username=#{username}
	</select>
	<!-- 查找角色权限 -->
	<select id="getPersByUsername" parameterType="String" resultType="string" >
		select pr.`pname` from(
		select e.*,p.per_id as pid from(
		select u.*,ur.id as rid from t_t_user u left join t_t_user_role ur on u.id = ur.user_id) e 
		left join t_t_role_per p on e.id=p.role_id) pu
		left join t_t_permission pr on pu.pid=pr.id
		where username = #{username}
	</select>
	<!-- 查找用户 -->
	<select id="getUserByUsername" parameterType="String" resultType="User" >
		select * from t_t_user where username = #{username}
	</select>
	<!-- 查找用户职务 -->
	<select id="findIdentiByUid" parameterType="int" resultType="String">
			select rolename from (
			select name,user_id,role_id from t_t_user u 
			left join t_t_user_role ur on u.id = ur.user_id)uu
			left join t_t_role r on uu.role_id = r.id
			where uu.user_id = #{id}
	</select>
	<!-- 查找学生 -->
	<select id="findPartStudent" resultType="Student" parameterType="map">
		select * from t_t_student
			<where>
				<trim suffixOverrides="and">
					<if test="map.name != null and map.name != ''">
						name LIKE concat(concat('%',#{map.name}),'%') and
					</if>
					<if test="map.address != null and map.address != ''">
						address LIKE concat(concat('%',#{map.address}),'%') and
					</if>
				</trim> 
			</where>
			order by id
			limit #{map.start},#{map.rows}
	</select>
	<!-- 新增学生信息 -->
	<insert id="addStudent" parameterType="Student">
		insert into t_t_student(name,age,phone,address) values(#{pojo.name},#{pojo.age},#{pojo.phone},#{pojo.address})
	</insert>
	<!-- 删除学生信息 -->
	<delete id="deleteStudent" parameterType="int">
		delete from t_t_student where id = #{id}
	</delete>
	<!-- 修改学生信息 -->
	<update id="updateSaveStudent" parameterType="Student">
		update t_t_student set name = #{pojo.name},age = #{pojo.age},phone =  #{pojo.phone},address = #{pojo.address} where id = #{pojo.id}
	</update>
	<!-- 查找用户 -->
	<select id="findUserById" parameterType="int" resultType="User" >
		select * from t_t_user where id = #{id}
	</select>
	<!-- 查找所有学生 -->
	<select id="findAllStudent" resultType="Student">
		select * from t_t_student order by id
	</select>
	<!-- 查找所有要导出的学生 -->
	<select id="exportStudents" resultType="Student" parameterType="map">
		select * from t_t_student where id in (${map.ids})
	</select>
	<!-- 查找单个学生 -->
	<select id="getStudentById" resultType="Student" parameterType="int">
		select * from t_t_student where id=#{id}
	</select>
	<!-- 根据条件查找学生 -->
	<select id="findPartStudents" resultType="Student" parameterType="map">
		select * from t_t_student
		<where>
			<trim suffixOverrides="and">
				<if test="map.name != null and map.name != ''">
					name LIKE concat(concat('%',#{map.name}),'%') and
				</if>
				<if test="map.address != null and map.address != ''">
					address LIKE concat(concat('%',#{map.address}),'%') and
				</if>
			</trim>
		</where>
	</select>
	<resultMap type="Count" id="CountMap">
		  <id property="id" column="id"/>
  			<result property="userid" column="userid"/>
  			<result property="count" column="usercount"/>
		  </resultMap>
</mapper>
